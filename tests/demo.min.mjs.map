{
  "version": 3,
  "sources": ["src/react-jsvn.js", "src/base.vlib.js", "src/ListComponent.js", "src/MainComponent.js", "src/index.js"],
  "sourcesContent": ["export const decorate = $$ => {\r\n\tif ($$.View.decorator) throw new Error('react-jsvn/decorate : JSVN is already decorated.');\r\n\r\n\t$$.View = class extends $$.View {\r\n\t\tstatic get decorator () { return 'react'; }\r\n\r\n\t\tstatic render (tag, classes, params, style, events, children) {\r\n\t\t\tif (!children) children = [];\r\n\t\t\tevents = Object.entries(events).reduce((arr, [k, v])=>{ arr['on' + k[0].toUpperCase() + k.slice(1)] = v; return arr;}, {});\r\n\t\t\treturn React.createElement(tag, { className: classes.join(' '), style, ...events, ...params }, ...children);\r\n\t\t}\r\n\r\n\t\tstatic styles (css, className) {\r\n\t\t\tif (document.head && !document.querySelector(`style[data-view=\"${className}\"]`)) {\r\n\t\t\t\tdocument.head.insertAdjacentHTML('beforeend', `<style data-view=\"${className}\">${css}</style>`);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn $$;\r\n};\r\n\r\nexport default decorate($$);", "import $$ from './react-jsvn.js';\r\n\r\n//View based on <div>\r\nexport const UIBase = new $$.View({\r\n\theight       : '30px', //Style, will be added to css\r\n\tborder       : '1px solid #666',\r\n\tborderRadius : '5px',\r\n\tboxSizing    : 'border-box',\r\n\r\n\t':focus': { //Local style\r\n\t\toutline: 'none',\r\n\t}\r\n});\r\n\r\n//View that extends UIBase and <button> tag\r\n//The first base in the list overloads the next, etc.\r\n//Bases can be View, class, tag (But Vue is only one)\r\nexport const Button = new $$.View(['<>button', UIBase], {\r\n\twidth : '60px',\r\n\r\n\t__onclick : it=>it.action, //Event; 'it' in 'it.action' is environment (model/ctrl/props/state), 'action' - handler function.\r\n\r\n\t[$$.text] : it=>it.label, //Text node\r\n\r\n\t':hover': {\r\n\t\tbackground : '#9cf',\r\n\t\tcolor      : '#fff',\r\n\t\tcursor     : 'pointer',\r\n\t}\r\n});\r\n\r\nexport const Input = new $$.View(['/input', UIBase], { //Prefix '/' indicates a self-closing tag\r\n\twidth   : '90px',\r\n\tpadding : '0 15px',\r\n});\r\n\r\nexport const OneLineTable = new $$.View({\r\n\tdisplay: 'table',\r\n\r\n\t'.cell': {\r\n\t\tdisplay: 'table-cell',\r\n\t},\r\n});", "import $$ from './react-jsvn.js';\r\nimport { Button, OneLineTable } from './base.vlib.js';\r\n\r\nconst { useMemo } = React;\r\n\r\n//React Function Component with view\r\nconst List = props => {\r\n\tconst view = useMemo(()=>new $$.View('List', { //Memorizes view declaration with useMemo hook\r\n\t\tdisplay : 'table',\r\n\t\twidth   : '100%',\r\n\r\n\t\t[$$`item`]: {\r\n\t\t\t__EACH: it=>it.items, //Will repeat this node for each item in 'it.items' array\r\n\t\t\t$key: item=>item,\r\n\r\n\t\t\tdisplay : 'table-row',\r\n\t\t\theight  : '30px',\r\n\t\t\twidth   : '100%',\r\n\r\n\t\t\t'.cell': {\r\n\t\t\t\tdisplay: 'table-cell',\r\n\r\n\t\t\t\tpaddingBottom : '5px',\r\n\t\t\t\tpaddingTop    : '5px',\r\n\t\t\t\tborderBottom  : '1px solid #999',\r\n\t\t\t},\r\n\r\n\t\t\t//Child node based on local style '.cell'\r\n\t\t\t[$$`item-name `('cell')]: {\r\n\t\t\t\t[$$.text]: item=>item,\r\n\t\t\t},\r\n\r\n\t\t\t[$$`item-opts `('cell')]: {\r\n\t\t\t\twidth: '30px',\r\n\r\n\t\t\t\t//Child node that extends Button view\r\n\t\t\t\t[$$(Button)]: {\r\n\t\t\t\t\twidth: '30px',\r\n\r\n\t\t\t\t\t//Model overloading\r\n\t\t\t\t\t_label  : 'X',\r\n\t\t\t\t\t_action : (item, it) => ()=>it.removeItem(item),\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t}\r\n\t}), []);\r\n\r\n\treturn view.render(props);\r\n};\r\n\r\nexport default List;", "import $$ from './react-jsvn.js';\r\nimport List from './ListComponent.js';\r\nimport {Input, Button, OneLineTable} from './base.vlib.js';\r\n\r\nconst { useMemo, useState } = React;\r\n\r\n//const testStyle = $$.import('test-style');\r\n\r\nconst MainComponent = () => {\r\n\tconst [items, setItems]     = useState(['alpha', 'gamma']);\r\n\tconst [newName, setNewName] = useState('');\r\n\r\n\t//Memorizes controller\r\n\tconst ctrl = useMemo(()=>({\r\n\t\taddToList() {\r\n\t\t\tif (!newName) alert(`Empty value!`);\r\n\t\t\telse if (!items.some(item=>item === newName)) {\r\n\t\t\t\tsetItems([...items, newName]);\r\n\t\t\t\tsetNewName('');\r\n\t\t\t}\r\n\t\t\telse alert(`Item ${newName} already exist!`);\r\n\t\t},\r\n\t\tremoveItem(item) {\r\n\t\t\tsetItems(items.filter(i => i !== item));\r\n\t\t}\r\n\t}), [newName, items]);\r\n\r\n\tconst view = useMemo(()=>new $$.View({\r\n\t\twidth: '100%',\r\n\r\n\t\t[$$`form`]:{\r\n\t\t\tposition   : 'absolute',\r\n\t\t\tleft       : '50%',\r\n\t\t\tmarginLeft : '-320px',\r\n\t\t\twidth      : '640px',\r\n\t\t\tbackground : '#eee',\r\n\t\t\tmarginTop  : '20px',\r\n\r\n\t\t\t[$$`active-block `(OneLineTable)]: {\r\n\t\t\t\tdisplay   : 'table',\r\n\t\t\t\twidth     : '100%',\r\n\t\t\t\tmarginTop : '20px',\r\n\r\n\t\t\t\t'.cell' : { //Extends '.cell' subclass from 'OneLineTable'\r\n\t\t\t\t\tbackground: '#ccc',\r\n\t\t\t\t},\r\n\r\n\t\t\t\t[$$`item-name-cnt `('cell')]: { //Node based on 'cell' subclass from 'OneLineTable' extended with this local 'cell' subclass\r\n\t\t\t\t\tpaddingLeft: '20px',\r\n\r\n\t\t\t\t\t[$$`item-name `(Input)]: {\r\n\t\t\t\t\t\twidth: '520px',\r\n\r\n\t\t\t\t\t\t__bind: [it=>it.newName, it=>it.setNewName], //Bind variable to this input\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\r\n\t\t\t\t[$$('cell')]: {\r\n\t\t\t\t\twidth: '20px',\r\n\t\t\t\t},\r\n\r\n\t\t\t\t[$$('cell')]: {\r\n\t\t\t\t\tpaddingRight: '20px',\r\n\r\n\t\t\t\t\t//Include Button as view\r\n\t\t\t\t\t[$$(Button)]: it=>({ //Set model for this view\r\n\t\t\t\t\t\taction : it.addToList,\r\n\t\t\t\t\t\tlabel  : 'Add',\r\n\t\t\t\t\t}),\r\n\t\t\t\t},\r\n\t\t\t},\r\n\r\n\t\t\t[$$`list-cnt`]: {\r\n\t\t\t\twidth     : '100%',\r\n\t\t\t\tpadding   : '20px',\r\n\t\t\t\tboxSizing : 'border-box',\r\n\r\n\t\t\t\t//Include React Component\r\n\t\t\t\t[$$(List)]: it=>it,\r\n\t\t\t},\r\n\t\t},\r\n\r\n\t\tbackground: '#eee',\r\n\t}), []);\r\n\treturn view.render({...ctrl, items, setItems, newName, setNewName});\r\n};\r\n\r\nexport default MainComponent;", "import MainComponent from './MainComponent.js';\r\n\r\nReactDOM.render(\r\n\tReact.createElement(MainComponent, {}),\r\n\tdocument.getElementById(\"root\")\r\n);"],
  "mappings": "MAAO,MAAM,EAAW,IACvB,GAAI,EAAG,KAAK,UAAW,KAAM,IAAI,OAAM,oDAEvC,SAAG,KAAO,aAAc,GAAG,eACf,aAAe,MAAO,cAE1B,qBACN,MAAK,IAAU,GAAW,IAC1B,EAAS,OAAO,QAAQ,GAAQ,OAAO,WAAiB,GAAI,KAAO,EAAE,GAAG,cAAgB,EAAE,MAAM,IAAM,EAAU,GAAO,IAChH,MAAM,cAAc,EAAK,CAAE,UAAW,EAAQ,KAAK,KAAM,WAAU,KAAW,GAAU,GAAG,SAG5F,aACN,AAAI,SAAS,MAAQ,CAAC,SAAS,cAAc,oBAAoB,QAChE,SAAS,KAAK,mBAAmB,YAAa,qBAAqB,MAAc,eAI7E,GAGR,MAAe,EAAS,IClBjB,MAAM,EAAS,GAAI,GAAG,KAAK,CACjC,OAAe,OACf,OAAe,iBACf,aAAe,MACf,UAAe,aAEf,SAAU,CACT,QAAS,YAOW,GAAI,GAAG,KAAK,CAAC,WAAY,GAAS,CACvD,MAAQ,OAER,UAAY,GAAI,EAAG,QAElB,EAAG,MAAQ,GAAI,EAAG,MAEnB,SAAU,CACT,WAAa,OACb,MAAa,OACb,OAAa,eAIM,GAAI,GAAG,KAAK,CAAC,SAAU,GAAS,CACpD,MAAU,OACV,QAAU,aAGiB,GAAI,GAAG,KAAK,CACvC,QAAS,QAET,QAAS,CACR,QAAS,gBCrCL,CAAE,WAAY,QAGP,IACZ,QAAa,EAAQ,IAAI,GAAI,GAAG,KAAK,OAAQ,CAC5C,QAAU,QACV,MAAU,QAET,SAAW,CACX,OAAQ,GAAI,EAAG,MACf,KAAM,GAAM,EAEZ,QAAU,YACV,OAAU,OACV,MAAU,OAEV,QAAS,CACR,QAAS,aAET,cAAgB,MAChB,WAAgB,MAChB,aAAgB,mBAIhB,cAAe,SAAU,EACxB,EAAG,MAAO,GAAM,IAGjB,cAAe,SAAU,CACzB,MAAO,QAGN,EAAG,IAAU,CACb,MAAO,OAGP,OAAU,IACV,QAAU,OAAc,IAAI,EAAG,WAAW,QAI1C,IAEJ,MAAO,GAAK,OAAO,IAGpB,MAAe,EC9Cf,KAAM,CAAE,UAAS,YAAa,QAIR,KACrB,WAA8B,EAAS,CAAC,QAAS,gBACnB,EAAS,MAG1B,EAAQ,IAAK,EACzB,YACC,AAAK,EACA,AAAK,EAAM,KAAK,GAAM,IAAS,GAI/B,MAAM,QAAQ,oBAHlB,GAAS,CAAC,GAAG,EAAO,IACpB,EAAW,KAHE,MAAM,iBAOrB,cACC,EAAS,EAAM,OAAO,GAAK,IAAM,OAE/B,CAAC,EAAS,MAED,EAAQ,IAAI,GAAI,GAAG,KAAK,CACpC,MAAO,QAEN,SAAU,CACV,SAAa,WACb,KAAa,MACb,WAAa,SACb,MAAa,QACb,WAAa,OACb,UAAa,QAEZ,iBAAkB,IAAgB,CAClC,QAAY,QACZ,MAAY,OACZ,UAAY,OAEZ,QAAU,CACT,WAAY,SAGZ,kBAAmB,SAAU,CAC7B,YAAa,QAEZ,cAAe,IAAS,CACxB,MAAO,QAEP,OAAQ,CAAC,GAAI,EAAG,QAAS,GAAI,EAAG,eAIjC,EAAG,SAAU,CACb,MAAO,SAGP,EAAG,SAAU,CACb,aAAc,QAGb,EAAG,IAAU,GAAK,EAClB,OAAS,EAAG,UACZ,MAAS,WAKX,aAAe,CACf,MAAY,OACZ,QAAY,OACZ,UAAY,cAGX,EAAG,IAAQ,GAAI,IAIlB,WAAY,SACT,IACJ,MAAO,GAAK,OAAO,IAAI,EAAM,QAAO,WAAU,UAAS,gBAGxD,MAAe,ECrFf,SAAS,OACR,MAAM,cAAc,EAAe,IACnC,SAAS,eAAe",
  "names": []
}
